/*
 * Znunu.C
 *
 *  Created on: Sep 23, 2015
 *      Author: hqu
 */

#include <fstream>

//#include "HMParameters_SSR.hh"
#include "SRParameters_test.hh"
#include "../EstMethods/LLBEstimator.hh"
#include "../EstMethods/ZnunuEstimator.hh"
#include "../EstMethods/QCDEstimator.hh"

using namespace EstTools;

void BkgPredHM_SSR_QCD(){

  auto sigcfg = sigConfig();
  BaseEstimator s(sigcfg);
  s.calcYields();

  auto hdata = convertToHist(s.yields.at("data-sr"),"data",";Search Region;Events");
  vector<TH1*> mc;
  for (const auto &sig : s.yields){
    if (sig.first != "data-sr")
      mc.push_back(convertToHist(sig.second, sig.first, ";Search Region;Events"));
  }

  auto qcdcfg = qcdConfig();
  QCDEstimator q(qcdcfg);
//  q.runBootstrapping = false;
  q.pred();
  q.printYields();

  auto convert = [](const ToyCombination &c, vector<TH1*> &hists, vector<TGraphAsymmErrors*> &graphs){
    for(const auto &s : c.bkgs){
      hists.push_back(convertToHist(c.getPrediction(s.first), s.first, ";Search Region;Events"));
      graphs.push_back(convertToGraphAsymmErrors(c.getPrediction(s.first), s.first+"_gr", ";Search Region;Events"));
    }
    graphs.push_back(convertToGraphAsymmErrors(c.getPrediction(), "pred_total_gr", ";Search Region;Events"));
  };

  //ToyCombination tc;
  //tc.addBackground("qcd_pred",          &q.yields.at("_DATA"), &q.yields.at("_TF"));
  //tc.combine();

  //vector<TH1*> pred;
  //vector<TGraphAsymmErrors*> predGraphs;
  //convert(tc, pred, predGraphs);

  ToyCombination lc;
  lc.addBackground("qcd_pred",          &q.yields.at("_DATA"), &q.yields.at("_TF"));
  lc.combine();

  vector<TH1*> altpred;
  vector<TGraphAsymmErrors*> altgraphs;
  convert(lc, altpred, altgraphs);

  mc.push_back(convertToHist(q.yields.at("qcd-withveto-sr"),"qcd_mc",";Search Region;Events"));
  vector<TString> bkglabels = {"QCD"};
  vector<TString> datalabel = {"Data"};

  auto plot = [&](const vector<TH1*> &vpred, const vector<TGraphAsymmErrors*> &vgraphs,TString outputBase) {
    // plot pred and data
    prepHists(vpred, false, false, true);
    prepHists({hdata}, false, false, false, {kBlack});

    auto leg = prepLegends(vpred, bkglabels, "F");
    appendLegends(leg, {hdata}, datalabel, "LP");
    leg->SetTextSize(0.03);
//    leg->SetNColumns(2);
    leg->SetY1NDC(leg->GetY2NDC() - 0.2);
    auto c = drawStackAndRatio(vpred, hdata, leg, true, "N_{obs}/N_{exp}", 0.001, 2.999);
    c->SetTitle(outputBase);
    c->Print(s.config.outputdir+"/" + outputBase +".pdf");
    c->Print(s.config.outputdir+"/" + outputBase +".C");

    TFile *output = new TFile(s.config.outputdir+"/" + outputBase +".root", "RECREATE");
    for (auto *h : vpred) h->Write();
    for (auto *g : vgraphs) g->Write();
    for (auto *h : mc)   h->Write();
    hdata->Write();
    output->Close();
  };

  //  plot(pred, predGraphs, "std_pred_QCD");
  plot(altpred, altgraphs, "std_pred_trad");

  // cout << "\n\n QCD \n";
  // for (const auto &b : tc.bkgs){
  //   s.printVec(tc.getPrediction(b.first),b.first);
  // }
  // s.printVec(tc.getPrediction(),"total_bkg");
  // cout << "\n Summary QCD \n";
  // // s.printSummary({z.yields.at("_pred"), l.yields.at("_pred"), q.yields.at("_pred"), l.yields.at("rare-sr")}, s.yields.at("data-sr"));
  // s.printSummary({q.yields.at("_pred")},s.yields.at("data-sr"));

  cout << "\n\n Traditional \n";
  for (const auto &b : lc.bkgs){
    s.printVec(lc.getPrediction(b.first),b.first);
  }
  s.printVec(lc.getPrediction(),"total_bkg");
  cout << "\n Summary Traditional \n";
  //s.printSummary({z.yields.at("_pred"), alt.yields.at("_pred"), q.yields.at("_pred"), alt.yields.at("rare-sr")}, s.yields.at("data-sr"));
  s.printSummary({q.yields.at("_pred")}, s.yields.at("data-sr"));
}
